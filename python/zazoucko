#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright 2013 Nathanaël Jourdane
# This file is part of Zazoucko.
# Zazoucko is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
# Zazoucko is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with Zazoucko. If not, see <http://www.gnu.org/licenses/>.

# TODO : alléger avec from .. import ..
from datetime import datetime as date
import argparse, os, sys, shutil, tempfile
import export # lol

#TODO : utiliser tempfile.tempdir
tmp_dir = tempfile.gettempdir() + "/"
openscad_path = "openscad"

zazoucko_python_dir = os.path.abspath(os.path.dirname(sys.argv[0]))
zazoucko_scad_dir = zazoucko_python_dir + "/../scad/"
cwd_dir = os.getcwd() + "/"

def correct_input(string):
	if not os.path.exists(string):
		raise argparse.ArgumentTypeError("Filename %r doesn\'t exists in this directory." % string)

	if string[-4:] != ".stl" and string[-4:] != ".csv":
		raise argparse.ArgumentTypeError("%r is not a .stl or a .csv file." % string)
	return string

def parser():
	version = str(date.now().year-2013) + "." + str(date.now().month) + "." + str(date.now().day)

	parser = argparse.ArgumentParser(
			formatter_class=argparse.RawDescriptionHelpFormatter,
			description = 'Zazoucko - The Open-source Universal Awesome Construction Kit. This program allows you to build constructions, with generating files to print from your model. It works in 2 times: first, it build a .csv table file (very fast) describing the parts, then it compile this one into a lot of .stl files (can be long).',
			epilog = 'Zazoucko is licensed under GNU GPLv3: www.gnu.org/licenses/gpl-3.0.html')
	
	# ok
	parser.add_argument('input_path', action = 'store',
		type = correct_input,
		help = '3d model (.stl) or table (.csv) path of your model. The program will automatically generates the .stl files according to the file type.')

	# ok
	parser.add_argument('-v', '--version', action='version',                    
		version="Zazoucko version " + version, help = 'Show program version and exit.')

	# ok
	parser.add_argument('-b', '--build-only', action = 'store', nargs = '?',
		dest = 'table_path', type = argparse.FileType('w'), default = None, const = tmp_dir + "_",
		help = 'Build only table (.csv) as TABLE_PATH (projet_name.csv by default), without compile stl files.')
	
	# ok
	parser.add_argument('-e', '--export-dir', action = 'store',
		dest = 'export_dir', default = None,
		help = 'Directory where .stl files will be exported (./projet_name/ by default)')
	
	# TODO
	parser.add_argument('-p', '--param-path', action = 'store',
		dest = 'parameter_path', type = argparse.FileType('r'), default = None,
		help = 'Parameters file path, containing parts parameters.')
	
	# ok
	parser.add_argument('-l', '--low_qlt', action = 'store_true',
		dest = 'low_qlt', default = False,
		help = 'The files are quickly compiled in low-quality. Usefull for testing, not able to be print.')

	# ok
	parser.add_argument('-S', '--sort', action = 'store_false',
		dest = 'shuffle', default = True,
		help = 'Doesn\'t shuffle the list of corners and polygons in random order.')
	
	# ok
	parser.add_argument('-s', action = 'store',
		dest = 'start_from', type = int, default = 0,
		help = 'Start compilation from line xx in the .csv file.')

	# ok
	parser.add_argument('-f', action = 'store',
		dest = 'finish_at', type = int, default = 0,
		help = 'Finish compilation at line xx in the .csv file.')
	
	# ok
	parser.add_argument('-d', '--documentation', action = 'store', nargs = '?',
		dest = 'doc_dir', default = None, const = tmp_dir + "_",
		help = 'Build a nice document in DOC_DIR (./doc by default), to help you to build your construction easily.')
	
	# ok
	parser.add_argument('-V', '--verbose-cmd', action = 'store', nargs = '?',
		dest = 'verbose', type=int, choices=xrange(0, 4), default = 0, const = 1,
		help = 'Verbose level: 0 = nothing, 1 = OpenScad calls (default), 2 = OpenScad warning messages, 3 = all OpenScad messages.')

	# ok
	parser.add_argument('-D', '--details', action = 'store', nargs = '?',
		dest = 'details_path', type = argparse.FileType('w'), default = None, const = cwd_dir + "details.txt",
		help = 'Export details about the model (corners position, polygons, corners_network, edges, etc.) in DETAILS_PATH (./details.txt by default).')
	
	parser.add_argument('-m', '--make_full_model', action = 'store', nargs = '?',
		dest = 'full_model_path', type = argparse.FileType('w'), default = None, const = tmp_dir + "_",
		help = 'Create the 3d model of the construction in FULL_MODEL_PATH (./full_model.stl by default).')

	return parser.parse_args()

def main():

	opt = parser()

	is_csv = True if opt.input_path[-4:] == ".csv" else False # True if *.csv ; False if *.stl
	input_stl_path = cwd_dir + opt.input_path
	projet_name = os.path.splitext(os.path.basename(input_stl_path))[0]
	make_stl = True if opt.table_path == None else False
	export_dir = (cwd_dir + projet_name + "/") if opt.export_dir == None else opt.export_dir if opt.export_dir[-1] == "/" else opt.export_dir + "/"
	export_dir = cwd_dir if not make_stl else export_dir
	doc_dir = (export_dir + "doc/" if opt.doc_dir == tmp_dir + "_" else opt.doc_dir) if opt.doc_dir != None else None
	parameter_path = None if opt.parameter_path == None else opt.parameter_path.name
	details_path = None if opt.details_path == None else opt.details_path.name
	full_model_path = (export_dir + "full_model.stl" if opt.full_model_path.name == tmp_dir + "_" else opt.full_model_path.name) if opt.full_model_path != None else None

	if make_stl: # si on compile les stl
		table_path = input_stl_path if is_csv else tmp_dir + "table.csv"
	else: # si on construit une table à partir d'un stl (-b [nom_table])
		if opt.table_path.name == tmp_dir + "_":
			table_path = cwd_dir + projet_name + ".csv"
			os.remove(tmp_dir + "_")
		else:
			table_path = opt.table_path.name

	exp = export.Export(openscad_path, table_path, zazoucko_scad_dir, export_dir, opt.verbose, opt.low_qlt)

	if not is_csv:
		exp.make_csv(input_stl_path, details_path, opt.start_from, opt.finish_at, opt.shuffle)

	if doc_dir != None:
		exp.make_pictures(doc_dir + "img")

	if make_stl:
		if os.path.exists(export_dir):
			shutil.rmtree(export_dir)
		os.makedirs(export_dir)
		exp.make_stls()

	if full_model_path != None:
		exp.make_model(full_model_path)

main()